// https://rust-lang.github.io/async-book/04_pinning/01_chapter.html#why-pinning

use std::{
    future::Future,
    pin::Pin,
    task::{Context, Poll},
};

// fn main() {
//     let fut_one = /* ... */;
//     let fut_two = /* ... */;
//     async move {
//         fut_one.await;
//         fut_two.await;
//     }
// }

// FIXME: error[E0599]: no method named `poll` found for struct `Box<(dyn Future<Output = usize> + 'static)>` in the current scope
type FutOne = Box<dyn Future<Output = usize>>;

// The `Future` type generated by our `async { ... }` block
// struct AsyncFuture {
//     fut_one: FutOne,
//     fut_two: FutTwo,
//     state: State,
// }

// List of states our `async` block can be in
// enum State {
//     AwaitingFutOne,
//     AwaitingFutTwo,
//     Done,
// }

// impl Future for AsyncFuture {
//     type Output = ();

//     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {
//         loop {
//             match self.state {
//                 State::AwaitingFutOne => match self.fut_one.poll(..) {
//                     Poll::Ready(()) => self.state = State::AwaitingFutTwo,
//                     Poll::Pending => return Poll::Pending,
//                 },
//                 State::AwaitingFutTwo => match self.fut_two.poll(..) {
//                     Poll::Ready(()) => self.state = State::Done,
//                     Poll::Pending => return Poll::Pending,
//                 },
//                 State::Done => return Poll::Ready(()),
//             }
//         }
//     }
// }
